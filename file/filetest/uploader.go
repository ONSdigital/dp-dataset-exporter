// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package filetest

import (
	"github.com/ONSdigital/dp-dataset-exporter/file"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3/s3manager"
	"sync"
)

var (
	lockUploaderMockSession       sync.RWMutex
	lockUploaderMockUpload        sync.RWMutex
	lockUploaderMockUploadWithPSK sync.RWMutex
)

// Ensure, that UploaderMock does implement file.Uploader.
// If this is not the case, regenerate this file with moq.
var _ file.Uploader = &UploaderMock{}

// UploaderMock is a mock implementation of file.Uploader.
//
//     func TestSomethingThatUsesUploader(t *testing.T) {
//
//         // make and configure a mocked file.Uploader
//         mockedUploader := &UploaderMock{
//             SessionFunc: func() *session.Session {
// 	               panic("mock out the Session method")
//             },
//             UploadFunc: func(input *s3manager.UploadInput, options ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
// 	               panic("mock out the Upload method")
//             },
//             UploadWithPSKFunc: func(input *s3manager.UploadInput, psk []byte) (*s3manager.UploadOutput, error) {
// 	               panic("mock out the UploadWithPSK method")
//             },
//         }
//
//         // use mockedUploader in code that requires file.Uploader
//         // and then make assertions.
//
//     }
type UploaderMock struct {
	// SessionFunc mocks the Session method.
	SessionFunc func() *session.Session

	// UploadFunc mocks the Upload method.
	UploadFunc func(input *s3manager.UploadInput, options ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error)

	// UploadWithPSKFunc mocks the UploadWithPSK method.
	UploadWithPSKFunc func(input *s3manager.UploadInput, psk []byte) (*s3manager.UploadOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// Session holds details about calls to the Session method.
		Session []struct {
		}
		// Upload holds details about calls to the Upload method.
		Upload []struct {
			// Input is the input argument value.
			Input *s3manager.UploadInput
			// Options is the options argument value.
			Options []func(*s3manager.Uploader)
		}
		// UploadWithPSK holds details about calls to the UploadWithPSK method.
		UploadWithPSK []struct {
			// Input is the input argument value.
			Input *s3manager.UploadInput
			// Psk is the psk argument value.
			Psk []byte
		}
	}
}

// Session calls SessionFunc.
func (mock *UploaderMock) Session() *session.Session {
	if mock.SessionFunc == nil {
		panic("UploaderMock.SessionFunc: method is nil but Uploader.Session was just called")
	}
	callInfo := struct {
	}{}
	lockUploaderMockSession.Lock()
	mock.calls.Session = append(mock.calls.Session, callInfo)
	lockUploaderMockSession.Unlock()
	return mock.SessionFunc()
}

// SessionCalls gets all the calls that were made to Session.
// Check the length with:
//     len(mockedUploader.SessionCalls())
func (mock *UploaderMock) SessionCalls() []struct {
} {
	var calls []struct {
	}
	lockUploaderMockSession.RLock()
	calls = mock.calls.Session
	lockUploaderMockSession.RUnlock()
	return calls
}

// Upload calls UploadFunc.
func (mock *UploaderMock) Upload(input *s3manager.UploadInput, options ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	if mock.UploadFunc == nil {
		panic("UploaderMock.UploadFunc: method is nil but Uploader.Upload was just called")
	}
	callInfo := struct {
		Input   *s3manager.UploadInput
		Options []func(*s3manager.Uploader)
	}{
		Input:   input,
		Options: options,
	}
	lockUploaderMockUpload.Lock()
	mock.calls.Upload = append(mock.calls.Upload, callInfo)
	lockUploaderMockUpload.Unlock()
	return mock.UploadFunc(input, options...)
}

// UploadCalls gets all the calls that were made to Upload.
// Check the length with:
//     len(mockedUploader.UploadCalls())
func (mock *UploaderMock) UploadCalls() []struct {
	Input   *s3manager.UploadInput
	Options []func(*s3manager.Uploader)
} {
	var calls []struct {
		Input   *s3manager.UploadInput
		Options []func(*s3manager.Uploader)
	}
	lockUploaderMockUpload.RLock()
	calls = mock.calls.Upload
	lockUploaderMockUpload.RUnlock()
	return calls
}

// UploadWithPSK calls UploadWithPSKFunc.
func (mock *UploaderMock) UploadWithPSK(input *s3manager.UploadInput, psk []byte) (*s3manager.UploadOutput, error) {
	if mock.UploadWithPSKFunc == nil {
		panic("UploaderMock.UploadWithPSKFunc: method is nil but Uploader.UploadWithPSK was just called")
	}
	callInfo := struct {
		Input *s3manager.UploadInput
		Psk   []byte
	}{
		Input: input,
		Psk:   psk,
	}
	lockUploaderMockUploadWithPSK.Lock()
	mock.calls.UploadWithPSK = append(mock.calls.UploadWithPSK, callInfo)
	lockUploaderMockUploadWithPSK.Unlock()
	return mock.UploadWithPSKFunc(input, psk)
}

// UploadWithPSKCalls gets all the calls that were made to UploadWithPSK.
// Check the length with:
//     len(mockedUploader.UploadWithPSKCalls())
func (mock *UploaderMock) UploadWithPSKCalls() []struct {
	Input *s3manager.UploadInput
	Psk   []byte
} {
	var calls []struct {
		Input *s3manager.UploadInput
		Psk   []byte
	}
	lockUploaderMockUploadWithPSK.RLock()
	calls = mock.calls.UploadWithPSK
	lockUploaderMockUploadWithPSK.RUnlock()
	return calls
}
