// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package filetest

import (
	"context"
	"github.com/ONSdigital/dp-dataset-exporter/file"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/feature/s3/manager"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"sync"
)

// Ensure, that UploaderMock does implement file.Uploader.
// If this is not the case, regenerate this file with moq.
var _ file.Uploader = &UploaderMock{}

// UploaderMock is a mock implementation of file.Uploader.
//
//	func TestSomethingThatUsesUploader(t *testing.T) {
//
//		// make and configure a mocked file.Uploader
//		mockedUploader := &UploaderMock{
//			BucketNameFunc: func() string {
//				panic("mock out the BucketName method")
//			},
//			CheckerFunc: func(ctx context.Context, state *healthcheck.CheckState) error {
//				panic("mock out the Checker method")
//			},
//			ConfigFunc: func() aws.Config {
//				panic("mock out the Config method")
//			},
//			UploadFunc: func(ctx context.Context, input *s3.PutObjectInput, options ...func(*manager.Uploader)) (*manager.UploadOutput, error) {
//				panic("mock out the Upload method")
//			},
//		}
//
//		// use mockedUploader in code that requires file.Uploader
//		// and then make assertions.
//
//	}
type UploaderMock struct {
	// BucketNameFunc mocks the BucketName method.
	BucketNameFunc func() string

	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, state *healthcheck.CheckState) error

	// ConfigFunc mocks the Config method.
	ConfigFunc func() aws.Config

	// UploadFunc mocks the Upload method.
	UploadFunc func(ctx context.Context, input *s3.PutObjectInput, options ...func(*manager.Uploader)) (*manager.UploadOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// BucketName holds details about calls to the BucketName method.
		BucketName []struct {
		}
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// State is the state argument value.
			State *healthcheck.CheckState
		}
		// Config holds details about calls to the Config method.
		Config []struct {
		}
		// Upload holds details about calls to the Upload method.
		Upload []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input *s3.PutObjectInput
			// Options is the options argument value.
			Options []func(*manager.Uploader)
		}
	}
	lockBucketName sync.RWMutex
	lockChecker    sync.RWMutex
	lockConfig     sync.RWMutex
	lockUpload     sync.RWMutex
}

// BucketName calls BucketNameFunc.
func (mock *UploaderMock) BucketName() string {
	if mock.BucketNameFunc == nil {
		panic("UploaderMock.BucketNameFunc: method is nil but Uploader.BucketName was just called")
	}
	callInfo := struct {
	}{}
	mock.lockBucketName.Lock()
	mock.calls.BucketName = append(mock.calls.BucketName, callInfo)
	mock.lockBucketName.Unlock()
	return mock.BucketNameFunc()
}

// BucketNameCalls gets all the calls that were made to BucketName.
// Check the length with:
//
//	len(mockedUploader.BucketNameCalls())
func (mock *UploaderMock) BucketNameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBucketName.RLock()
	calls = mock.calls.BucketName
	mock.lockBucketName.RUnlock()
	return calls
}

// Checker calls CheckerFunc.
func (mock *UploaderMock) Checker(ctx context.Context, state *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("UploaderMock.CheckerFunc: method is nil but Uploader.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}{
		Ctx:   ctx,
		State: state,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, state)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//
//	len(mockedUploader.CheckerCalls())
func (mock *UploaderMock) CheckerCalls() []struct {
	Ctx   context.Context
	State *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		State *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// Config calls ConfigFunc.
func (mock *UploaderMock) Config() aws.Config {
	if mock.ConfigFunc == nil {
		panic("UploaderMock.ConfigFunc: method is nil but Uploader.Config was just called")
	}
	callInfo := struct {
	}{}
	mock.lockConfig.Lock()
	mock.calls.Config = append(mock.calls.Config, callInfo)
	mock.lockConfig.Unlock()
	return mock.ConfigFunc()
}

// ConfigCalls gets all the calls that were made to Config.
// Check the length with:
//
//	len(mockedUploader.ConfigCalls())
func (mock *UploaderMock) ConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockConfig.RLock()
	calls = mock.calls.Config
	mock.lockConfig.RUnlock()
	return calls
}

// Upload calls UploadFunc.
func (mock *UploaderMock) Upload(ctx context.Context, input *s3.PutObjectInput, options ...func(*manager.Uploader)) (*manager.UploadOutput, error) {
	if mock.UploadFunc == nil {
		panic("UploaderMock.UploadFunc: method is nil but Uploader.Upload was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Input   *s3.PutObjectInput
		Options []func(*manager.Uploader)
	}{
		Ctx:     ctx,
		Input:   input,
		Options: options,
	}
	mock.lockUpload.Lock()
	mock.calls.Upload = append(mock.calls.Upload, callInfo)
	mock.lockUpload.Unlock()
	return mock.UploadFunc(ctx, input, options...)
}

// UploadCalls gets all the calls that were made to Upload.
// Check the length with:
//
//	len(mockedUploader.UploadCalls())
func (mock *UploaderMock) UploadCalls() []struct {
	Ctx     context.Context
	Input   *s3.PutObjectInput
	Options []func(*manager.Uploader)
} {
	var calls []struct {
		Ctx     context.Context
		Input   *s3.PutObjectInput
		Options []func(*manager.Uploader)
	}
	mock.lockUpload.RLock()
	calls = mock.calls.Upload
	mock.lockUpload.RUnlock()
	return calls
}
