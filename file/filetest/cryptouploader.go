// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package filetest

import (
	"github.com/aws/aws-sdk-go/service/s3/s3manager"
	"sync"
)

var (
	lockCryptoUploaderMockUploadWithPSK sync.RWMutex
)

// CryptoUploaderMock is a mock implementation of CryptoUploader.
//
//     func TestSomethingThatUsesCryptoUploader(t *testing.T) {
//
//         // make and configure a mocked CryptoUploader
//         mockedCryptoUploader := &CryptoUploaderMock{
//             UploadWithPSKFunc: func(input *s3manager.UploadInput, psk []byte) (*s3manager.UploadOutput, error) {
// 	               panic("TODO: mock out the UploadWithPSK method")
//             },
//         }
//
//         // TODO: use mockedCryptoUploader in code that requires CryptoUploader
//         //       and then make assertions.
//
//     }
type CryptoUploaderMock struct {
	// UploadWithPSKFunc mocks the UploadWithPSK method.
	UploadWithPSKFunc func(input *s3manager.UploadInput, psk []byte) (*s3manager.UploadOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// UploadWithPSK holds details about calls to the UploadWithPSK method.
		UploadWithPSK []struct {
			// Input is the input argument value.
			Input *s3manager.UploadInput
			// Psk is the psk argument value.
			Psk []byte
		}
	}
}

// UploadWithPSK calls UploadWithPSKFunc.
func (mock *CryptoUploaderMock) UploadWithPSK(input *s3manager.UploadInput, psk []byte) (*s3manager.UploadOutput, error) {
	if mock.UploadWithPSKFunc == nil {
		panic("moq: CryptoUploaderMock.UploadWithPSKFunc is nil but CryptoUploader.UploadWithPSK was just called")
	}
	callInfo := struct {
		Input *s3manager.UploadInput
		Psk   []byte
	}{
		Input: input,
		Psk:   psk,
	}
	lockCryptoUploaderMockUploadWithPSK.Lock()
	mock.calls.UploadWithPSK = append(mock.calls.UploadWithPSK, callInfo)
	lockCryptoUploaderMockUploadWithPSK.Unlock()
	return mock.UploadWithPSKFunc(input, psk)
}

// UploadWithPSKCalls gets all the calls that were made to UploadWithPSK.
// Check the length with:
//     len(mockedCryptoUploader.UploadWithPSKCalls())
func (mock *CryptoUploaderMock) UploadWithPSKCalls() []struct {
	Input *s3manager.UploadInput
	Psk   []byte
} {
	var calls []struct {
		Input *s3manager.UploadInput
		Psk   []byte
	}
	lockCryptoUploaderMockUploadWithPSK.RLock()
	calls = mock.calls.UploadWithPSK
	lockCryptoUploaderMockUploadWithPSK.RUnlock()
	return calls
}
