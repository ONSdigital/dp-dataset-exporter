// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package readertest

import (
	"github.com/ONSdigital/dp-dataset-exporter/reader"
	"sync"
)

var (
	lockWrappedReaderMockRead sync.RWMutex
)

// Ensure, that WrappedReaderMock does implement reader.WrappedReader.
// If this is not the case, regenerate this file with moq.
var _ reader.WrappedReader = &WrappedReaderMock{}

// WrappedReaderMock is a mock implementation of reader.WrappedReader.
//
//     func TestSomethingThatUsesWrappedReader(t *testing.T) {
//
//         // make and configure a mocked reader.WrappedReader
//         mockedWrappedReader := &WrappedReaderMock{
//             ReadFunc: func(p []byte) (int, error) {
// 	               panic("mock out the Read method")
//             },
//         }
//
//         // use mockedWrappedReader in code that requires reader.WrappedReader
//         // and then make assertions.
//
//     }
type WrappedReaderMock struct {
	// ReadFunc mocks the Read method.
	ReadFunc func(p []byte) (int, error)

	// calls tracks calls to the methods.
	calls struct {
		// Read holds details about calls to the Read method.
		Read []struct {
			// P is the p argument value.
			P []byte
		}
	}
}

// Read calls ReadFunc.
func (mock *WrappedReaderMock) Read(p []byte) (int, error) {
	if mock.ReadFunc == nil {
		panic("WrappedReaderMock.ReadFunc: method is nil but WrappedReader.Read was just called")
	}
	callInfo := struct {
		P []byte
	}{
		P: p,
	}
	lockWrappedReaderMockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	lockWrappedReaderMockRead.Unlock()
	return mock.ReadFunc(p)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//     len(mockedWrappedReader.ReadCalls())
func (mock *WrappedReaderMock) ReadCalls() []struct {
	P []byte
} {
	var calls []struct {
		P []byte
	}
	lockWrappedReaderMockRead.RLock()
	calls = mock.calls.Read
	lockWrappedReaderMockRead.RUnlock()
	return calls
}
