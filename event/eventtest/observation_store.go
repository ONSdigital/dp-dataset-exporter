// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package eventtest

import (
	"context"
	"github.com/ONSdigital/dp-dataset-exporter/event"
	"github.com/ONSdigital/dp-graph/v2/observation"
	"sync"
)

var (
	lockObservationStoreMockStreamCSVRows sync.RWMutex
)

// Ensure, that ObservationStoreMock does implement ObservationStore.
// If this is not the case, regenerate this file with moq.
var _ event.ObservationStore = &ObservationStoreMock{}

// ObservationStoreMock is a mock implementation of event.ObservationStore.
//
//     func TestSomethingThatUsesObservationStore(t *testing.T) {
//
//         // make and configure a mocked event.ObservationStore
//         mockedObservationStore := &ObservationStoreMock{
//             StreamCSVRowsFunc: func(ctx context.Context, instanceID string, filterID string, filters *observation.DimensionFilters, limit *int) (observation.StreamRowReader, error) {
// 	               panic("mock out the StreamCSVRows method")
//             },
//         }
//
//         // use mockedObservationStore in code that requires event.ObservationStore
//         // and then make assertions.
//
//     }
type ObservationStoreMock struct {
	// StreamCSVRowsFunc mocks the StreamCSVRows method.
	StreamCSVRowsFunc func(ctx context.Context, instanceID string, filterID string, filters *observation.DimensionFilters, limit *int) (observation.StreamRowReader, error)

	// calls tracks calls to the methods.
	calls struct {
		// StreamCSVRows holds details about calls to the StreamCSVRows method.
		StreamCSVRows []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
			// FilterID is the filterID argument value.
			FilterID string
			// Filters is the filters argument value.
			Filters *observation.DimensionFilters
			// Limit is the limit argument value.
			Limit *int
		}
	}
}

// StreamCSVRows calls StreamCSVRowsFunc.
func (mock *ObservationStoreMock) StreamCSVRows(ctx context.Context, instanceID string, filterID string, filters *observation.DimensionFilters, limit *int) (observation.StreamRowReader, error) {
	if mock.StreamCSVRowsFunc == nil {
		panic("ObservationStoreMock.StreamCSVRowsFunc: method is nil but ObservationStore.StreamCSVRows was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
		FilterID   string
		Filters    *observation.DimensionFilters
		Limit      *int
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
		FilterID:   filterID,
		Filters:    filters,
		Limit:      limit,
	}
	lockObservationStoreMockStreamCSVRows.Lock()
	mock.calls.StreamCSVRows = append(mock.calls.StreamCSVRows, callInfo)
	lockObservationStoreMockStreamCSVRows.Unlock()
	return mock.StreamCSVRowsFunc(ctx, instanceID, filterID, filters, limit)
}

// StreamCSVRowsCalls gets all the calls that were made to StreamCSVRows.
// Check the length with:
//     len(mockedObservationStore.StreamCSVRowsCalls())
func (mock *ObservationStoreMock) StreamCSVRowsCalls() []struct {
	Ctx        context.Context
	InstanceID string
	FilterID   string
	Filters    *observation.DimensionFilters
	Limit      *int
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
		FilterID   string
		Filters    *observation.DimensionFilters
		Limit      *int
	}
	lockObservationStoreMockStreamCSVRows.RLock()
	calls = mock.calls.StreamCSVRows
	lockObservationStoreMockStreamCSVRows.RUnlock()
	return calls
}
