// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package eventtest

import (
	"context"
	"github.com/ONSdigital/dp-dataset-exporter/event"
	"github.com/ONSdigital/dp-graph/observation"
	"sync"
)

var (
	lockObservationStoreMockStreamCSVRows sync.RWMutex
)

// Ensure, that ObservationStoreMock does implement ObservationStore.
// If this is not the case, regenerate this file with moq.
var _ event.ObservationStore = &ObservationStoreMock{}

// ObservationStoreMock is a mock implementation of event.ObservationStore.
//
//     func TestSomethingThatUsesObservationStore(t *testing.T) {
//
//         // make and configure a mocked event.ObservationStore
//         mockedObservationStore := &ObservationStoreMock{
//             StreamCSVRowsFunc: func(ctx context.Context, filter *observation.Filter, limit *int) (observation.StreamRowReader, error) {
// 	               panic("mock out the StreamCSVRows method")
//             },
//         }
//
//         // use mockedObservationStore in code that requires event.ObservationStore
//         // and then make assertions.
//
//     }
type ObservationStoreMock struct {
	// StreamCSVRowsFunc mocks the StreamCSVRows method.
	StreamCSVRowsFunc func(ctx context.Context, filter *observation.Filter, limit *int) (observation.StreamRowReader, error)

	// calls tracks calls to the methods.
	calls struct {
		// StreamCSVRows holds details about calls to the StreamCSVRows method.
		StreamCSVRows []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Filter is the filter argument value.
			Filter *observation.Filter
			// Limit is the limit argument value.
			Limit *int
		}
	}
}

// StreamCSVRows calls StreamCSVRowsFunc.
func (mock *ObservationStoreMock) StreamCSVRows(ctx context.Context, filter *observation.Filter, limit *int) (observation.StreamRowReader, error) {
	if mock.StreamCSVRowsFunc == nil {
		panic("ObservationStoreMock.StreamCSVRowsFunc: method is nil but ObservationStore.StreamCSVRows was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Filter *observation.Filter
		Limit  *int
	}{
		Ctx:    ctx,
		Filter: filter,
		Limit:  limit,
	}
	lockObservationStoreMockStreamCSVRows.Lock()
	mock.calls.StreamCSVRows = append(mock.calls.StreamCSVRows, callInfo)
	lockObservationStoreMockStreamCSVRows.Unlock()
	return mock.StreamCSVRowsFunc(ctx, filter, limit)
}

// StreamCSVRowsCalls gets all the calls that were made to StreamCSVRows.
// Check the length with:
//     len(mockedObservationStore.StreamCSVRowsCalls())
func (mock *ObservationStoreMock) StreamCSVRowsCalls() []struct {
	Ctx    context.Context
	Filter *observation.Filter
	Limit  *int
} {
	var calls []struct {
		Ctx    context.Context
		Filter *observation.Filter
		Limit  *int
	}
	lockObservationStoreMockStreamCSVRows.RLock()
	calls = mock.calls.StreamCSVRows
	lockObservationStoreMockStreamCSVRows.RUnlock()
	return calls
}
