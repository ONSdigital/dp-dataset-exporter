// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package eventtest

import (
	"context"
	"github.com/ONSdigital/dp-dataset-exporter/event"
	"github.com/ONSdigital/dp-graph/observation"
	"sync"
)

var (
	lockFilterStoreMockGetFilter       sync.RWMutex
	lockFilterStoreMockPutCSVData      sync.RWMutex
	lockFilterStoreMockPutStateAsEmpty sync.RWMutex
	lockFilterStoreMockPutStateAsError sync.RWMutex
)

// Ensure, that FilterStoreMock does implement FilterStore.
// If this is not the case, regenerate this file with moq.
var _ event.FilterStore = &FilterStoreMock{}

// FilterStoreMock is a mock implementation of event.FilterStore.
//
//     func TestSomethingThatUsesFilterStore(t *testing.T) {
//
//         // make and configure a mocked event.FilterStore
//         mockedFilterStore := &FilterStoreMock{
//             GetFilterFunc: func(ctx context.Context, filterID string) (*observation.Filter, error) {
// 	               panic("mock out the GetFilter method")
//             },
//             PutCSVDataFunc: func(ctx context.Context, filterID string, downloadItem observation.DownloadItem) error {
// 	               panic("mock out the PutCSVData method")
//             },
//             PutStateAsEmptyFunc: func(ctx context.Context, filterJobID string) error {
// 	               panic("mock out the PutStateAsEmpty method")
//             },
//             PutStateAsErrorFunc: func(ctx context.Context, filterJobID string) error {
// 	               panic("mock out the PutStateAsError method")
//             },
//         }
//
//         // use mockedFilterStore in code that requires event.FilterStore
//         // and then make assertions.
//
//     }
type FilterStoreMock struct {
	// GetFilterFunc mocks the GetFilter method.
	GetFilterFunc func(ctx context.Context, filterID string) (*observation.Filter, error)

	// PutCSVDataFunc mocks the PutCSVData method.
	PutCSVDataFunc func(ctx context.Context, filterID string, downloadItem observation.DownloadItem) error

	// PutStateAsEmptyFunc mocks the PutStateAsEmpty method.
	PutStateAsEmptyFunc func(ctx context.Context, filterJobID string) error

	// PutStateAsErrorFunc mocks the PutStateAsError method.
	PutStateAsErrorFunc func(ctx context.Context, filterJobID string) error

	// calls tracks calls to the methods.
	calls struct {
		// GetFilter holds details about calls to the GetFilter method.
		GetFilter []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FilterID is the filterID argument value.
			FilterID string
		}
		// PutCSVData holds details about calls to the PutCSVData method.
		PutCSVData []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FilterID is the filterID argument value.
			FilterID string
			// DownloadItem is the downloadItem argument value.
			DownloadItem observation.DownloadItem
		}
		// PutStateAsEmpty holds details about calls to the PutStateAsEmpty method.
		PutStateAsEmpty []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FilterJobID is the filterJobID argument value.
			FilterJobID string
		}
		// PutStateAsError holds details about calls to the PutStateAsError method.
		PutStateAsError []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FilterJobID is the filterJobID argument value.
			FilterJobID string
		}
	}
}

// GetFilter calls GetFilterFunc.
func (mock *FilterStoreMock) GetFilter(ctx context.Context, filterID string) (*observation.Filter, error) {
	if mock.GetFilterFunc == nil {
		panic("FilterStoreMock.GetFilterFunc: method is nil but FilterStore.GetFilter was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		FilterID string
	}{
		Ctx:      ctx,
		FilterID: filterID,
	}
	lockFilterStoreMockGetFilter.Lock()
	mock.calls.GetFilter = append(mock.calls.GetFilter, callInfo)
	lockFilterStoreMockGetFilter.Unlock()
	return mock.GetFilterFunc(ctx, filterID)
}

// GetFilterCalls gets all the calls that were made to GetFilter.
// Check the length with:
//     len(mockedFilterStore.GetFilterCalls())
func (mock *FilterStoreMock) GetFilterCalls() []struct {
	Ctx      context.Context
	FilterID string
} {
	var calls []struct {
		Ctx      context.Context
		FilterID string
	}
	lockFilterStoreMockGetFilter.RLock()
	calls = mock.calls.GetFilter
	lockFilterStoreMockGetFilter.RUnlock()
	return calls
}

// PutCSVData calls PutCSVDataFunc.
func (mock *FilterStoreMock) PutCSVData(ctx context.Context, filterID string, downloadItem observation.DownloadItem) error {
	if mock.PutCSVDataFunc == nil {
		panic("FilterStoreMock.PutCSVDataFunc: method is nil but FilterStore.PutCSVData was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		FilterID     string
		DownloadItem observation.DownloadItem
	}{
		Ctx:          ctx,
		FilterID:     filterID,
		DownloadItem: downloadItem,
	}
	lockFilterStoreMockPutCSVData.Lock()
	mock.calls.PutCSVData = append(mock.calls.PutCSVData, callInfo)
	lockFilterStoreMockPutCSVData.Unlock()
	return mock.PutCSVDataFunc(ctx, filterID, downloadItem)
}

// PutCSVDataCalls gets all the calls that were made to PutCSVData.
// Check the length with:
//     len(mockedFilterStore.PutCSVDataCalls())
func (mock *FilterStoreMock) PutCSVDataCalls() []struct {
	Ctx          context.Context
	FilterID     string
	DownloadItem observation.DownloadItem
} {
	var calls []struct {
		Ctx          context.Context
		FilterID     string
		DownloadItem observation.DownloadItem
	}
	lockFilterStoreMockPutCSVData.RLock()
	calls = mock.calls.PutCSVData
	lockFilterStoreMockPutCSVData.RUnlock()
	return calls
}

// PutStateAsEmpty calls PutStateAsEmptyFunc.
func (mock *FilterStoreMock) PutStateAsEmpty(ctx context.Context, filterJobID string) error {
	if mock.PutStateAsEmptyFunc == nil {
		panic("FilterStoreMock.PutStateAsEmptyFunc: method is nil but FilterStore.PutStateAsEmpty was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		FilterJobID string
	}{
		Ctx:         ctx,
		FilterJobID: filterJobID,
	}
	lockFilterStoreMockPutStateAsEmpty.Lock()
	mock.calls.PutStateAsEmpty = append(mock.calls.PutStateAsEmpty, callInfo)
	lockFilterStoreMockPutStateAsEmpty.Unlock()
	return mock.PutStateAsEmptyFunc(ctx, filterJobID)
}

// PutStateAsEmptyCalls gets all the calls that were made to PutStateAsEmpty.
// Check the length with:
//     len(mockedFilterStore.PutStateAsEmptyCalls())
func (mock *FilterStoreMock) PutStateAsEmptyCalls() []struct {
	Ctx         context.Context
	FilterJobID string
} {
	var calls []struct {
		Ctx         context.Context
		FilterJobID string
	}
	lockFilterStoreMockPutStateAsEmpty.RLock()
	calls = mock.calls.PutStateAsEmpty
	lockFilterStoreMockPutStateAsEmpty.RUnlock()
	return calls
}

// PutStateAsError calls PutStateAsErrorFunc.
func (mock *FilterStoreMock) PutStateAsError(ctx context.Context, filterJobID string) error {
	if mock.PutStateAsErrorFunc == nil {
		panic("FilterStoreMock.PutStateAsErrorFunc: method is nil but FilterStore.PutStateAsError was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		FilterJobID string
	}{
		Ctx:         ctx,
		FilterJobID: filterJobID,
	}
	lockFilterStoreMockPutStateAsError.Lock()
	mock.calls.PutStateAsError = append(mock.calls.PutStateAsError, callInfo)
	lockFilterStoreMockPutStateAsError.Unlock()
	return mock.PutStateAsErrorFunc(ctx, filterJobID)
}

// PutStateAsErrorCalls gets all the calls that were made to PutStateAsError.
// Check the length with:
//     len(mockedFilterStore.PutStateAsErrorCalls())
func (mock *FilterStoreMock) PutStateAsErrorCalls() []struct {
	Ctx         context.Context
	FilterJobID string
} {
	var calls []struct {
		Ctx         context.Context
		FilterJobID string
	}
	lockFilterStoreMockPutStateAsError.RLock()
	calls = mock.calls.PutStateAsError
	lockFilterStoreMockPutStateAsError.RUnlock()
	return calls
}
