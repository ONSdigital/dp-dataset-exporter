// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package eventtest

import (
	"sync"
	"github.com/ONSdigital/dp-dataset-exporter/observation"
)

var (
	lockFilterStoreMockGetFilters	sync.RWMutex
	lockFilterStoreMockPutCSVData	sync.RWMutex
)

// FilterStoreMock is a mock implementation of FilterStore.
//
//     func TestSomethingThatUsesFilterStore(t *testing.T) {
//
//         // make and configure a mocked FilterStore
//         mockedFilterStore := &FilterStoreMock{ 
//             GetFiltersFunc: func(filterJobID string) (*observation.Filter, error) {
// 	               panic("TODO: mock out the GetFilters method")
//             },
//             PutCSVDataFunc: func(filterJobID string, url string, size int64) error {
// 	               panic("TODO: mock out the PutCSVData method")
//             },
//         }
//
//         // TODO: use mockedFilterStore in code that requires FilterStore
//         //       and then make assertions.
// 
//     }
type FilterStoreMock struct {
	// GetFiltersFunc mocks the GetFilters method.
	GetFiltersFunc func(filterJobID string) (*observation.Filter, error)

	// PutCSVDataFunc mocks the PutCSVData method.
	PutCSVDataFunc func(filterJobID string, url string, size int64) error

	// calls tracks calls to the methods.
	calls struct {
		// GetFilters holds details about calls to the GetFilters method.
		GetFilters []struct {
			// FilterJobID is the filterJobID argument value.
			FilterJobID string
		}
		// PutCSVData holds details about calls to the PutCSVData method.
		PutCSVData []struct {
			// FilterJobID is the filterJobID argument value.
			FilterJobID string
			// Url is the url argument value.
			Url string
			// Size is the size argument value.
			Size int64
		}
	}
}

// GetFilters calls GetFiltersFunc.
func (mock *FilterStoreMock) GetFilters(filterJobID string) (*observation.Filter, error) {
	if mock.GetFiltersFunc == nil {
		panic("moq: FilterStoreMock.GetFiltersFunc is nil but FilterStore.GetFilters was just called")
	}
	callInfo := struct {
		FilterJobID string
	}{
		FilterJobID: filterJobID,
	}
	lockFilterStoreMockGetFilters.Lock()
	mock.calls.GetFilters = append(mock.calls.GetFilters, callInfo)
	lockFilterStoreMockGetFilters.Unlock()
	return mock.GetFiltersFunc(filterJobID)
}

// GetFiltersCalls gets all the calls that were made to GetFilters.
// Check the length with:
//     len(mockedFilterStore.GetFiltersCalls())
func (mock *FilterStoreMock) GetFiltersCalls() []struct {
		FilterJobID string
	} {
	var calls []struct {
		FilterJobID string
	}
	lockFilterStoreMockGetFilters.RLock()
	calls = mock.calls.GetFilters
	lockFilterStoreMockGetFilters.RUnlock()
	return calls
}

// PutCSVData calls PutCSVDataFunc.
func (mock *FilterStoreMock) PutCSVData(filterJobID string, url string, size int64) error {
	if mock.PutCSVDataFunc == nil {
		panic("moq: FilterStoreMock.PutCSVDataFunc is nil but FilterStore.PutCSVData was just called")
	}
	callInfo := struct {
		FilterJobID string
		Url string
		Size int64
	}{
		FilterJobID: filterJobID,
		Url: url,
		Size: size,
	}
	lockFilterStoreMockPutCSVData.Lock()
	mock.calls.PutCSVData = append(mock.calls.PutCSVData, callInfo)
	lockFilterStoreMockPutCSVData.Unlock()
	return mock.PutCSVDataFunc(filterJobID, url, size)
}

// PutCSVDataCalls gets all the calls that were made to PutCSVData.
// Check the length with:
//     len(mockedFilterStore.PutCSVDataCalls())
func (mock *FilterStoreMock) PutCSVDataCalls() []struct {
		FilterJobID string
		Url string
		Size int64
	} {
	var calls []struct {
		FilterJobID string
		Url string
		Size int64
	}
	lockFilterStoreMockPutCSVData.RLock()
	calls = mock.calls.PutCSVData
	lockFilterStoreMockPutCSVData.RUnlock()
	return calls
}
