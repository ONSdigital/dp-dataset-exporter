// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package eventtest

import (
	"context"
	"github.com/ONSdigital/dp-dataset-exporter/event"
	"sync"
)

// Ensure, that ProducerMock does implement event.Producer.
// If this is not the case, regenerate this file with moq.
var _ event.Producer = &ProducerMock{}

// ProducerMock is a mock implementation of event.Producer.
//
//	func TestSomethingThatUsesProducer(t *testing.T) {
//
//		// make and configure a mocked event.Producer
//		mockedProducer := &ProducerMock{
//			CSVExportedFunc: func(ctx context.Context, e *event.CSVExported) error {
//				panic("mock out the CSVExported method")
//			},
//		}
//
//		// use mockedProducer in code that requires event.Producer
//		// and then make assertions.
//
//	}
type ProducerMock struct {
	// CSVExportedFunc mocks the CSVExported method.
	CSVExportedFunc func(ctx context.Context, e *event.CSVExported) error

	// calls tracks calls to the methods.
	calls struct {
		// CSVExported holds details about calls to the CSVExported method.
		CSVExported []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// E is the e argument value.
			E *event.CSVExported
		}
	}
	lockCSVExported sync.RWMutex
}

// CSVExported calls CSVExportedFunc.
func (mock *ProducerMock) CSVExported(ctx context.Context, e *event.CSVExported) error {
	if mock.CSVExportedFunc == nil {
		panic("ProducerMock.CSVExportedFunc: method is nil but Producer.CSVExported was just called")
	}
	callInfo := struct {
		Ctx context.Context
		E   *event.CSVExported
	}{
		Ctx: ctx,
		E:   e,
	}
	mock.lockCSVExported.Lock()
	mock.calls.CSVExported = append(mock.calls.CSVExported, callInfo)
	mock.lockCSVExported.Unlock()
	return mock.CSVExportedFunc(ctx, e)
}

// CSVExportedCalls gets all the calls that were made to CSVExported.
// Check the length with:
//
//	len(mockedProducer.CSVExportedCalls())
func (mock *ProducerMock) CSVExportedCalls() []struct {
	Ctx context.Context
	E   *event.CSVExported
} {
	var calls []struct {
		Ctx context.Context
		E   *event.CSVExported
	}
	mock.lockCSVExported.RLock()
	calls = mock.calls.CSVExported
	mock.lockCSVExported.RUnlock()
	return calls
}
