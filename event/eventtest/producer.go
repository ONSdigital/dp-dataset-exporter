// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package eventtest

import (
	"github.com/ONSdigital/dp-dataset-exporter/event"
	"sync"
)

var (
	lockProducerMockCSVExported sync.RWMutex
)

// ProducerMock is a mock implementation of Producer.
//
//     func TestSomethingThatUsesProducer(t *testing.T) {
//
//         // make and configure a mocked Producer
//         mockedProducer := &ProducerMock{
//             CSVExportedFunc: func(e *event.CSVExported) error {
// 	               panic("TODO: mock out the CSVExported method")
//             },
//         }
//
//         // TODO: use mockedProducer in code that requires Producer
//         //       and then make assertions.
//
//     }
type ProducerMock struct {
	// CSVExportedFunc mocks the CSVExported method.
	CSVExportedFunc func(e *event.CSVExported) error

	// calls tracks calls to the methods.
	calls struct {
		// CSVExported holds details about calls to the CSVExported method.
		CSVExported []struct {
			// E is the e argument value.
			E *event.CSVExported
		}
	}
}

// CSVExported calls CSVExportedFunc.
func (mock *ProducerMock) CSVExported(e *event.CSVExported) error {
	if mock.CSVExportedFunc == nil {
		panic("moq: ProducerMock.CSVExportedFunc is nil but Producer.CSVExported was just called")
	}
	callInfo := struct {
		E *event.CSVExported
	}{
		E: e,
	}
	lockProducerMockCSVExported.Lock()
	mock.calls.CSVExported = append(mock.calls.CSVExported, callInfo)
	lockProducerMockCSVExported.Unlock()
	return mock.CSVExportedFunc(e)
}

// CSVExportedCalls gets all the calls that were made to CSVExported.
// Check the length with:
//     len(mockedProducer.CSVExportedCalls())
func (mock *ProducerMock) CSVExportedCalls() []struct {
	E *event.CSVExported
} {
	var calls []struct {
		E *event.CSVExported
	}
	lockProducerMockCSVExported.RLock()
	calls = mock.calls.CSVExported
	lockProducerMockCSVExported.RUnlock()
	return calls
}
