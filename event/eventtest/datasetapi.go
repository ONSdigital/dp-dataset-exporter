// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package eventtest

import (
	"context"
	"github.com/ONSdigital/go-ns/clients/dataset"
	"sync"
)

var (
	lockDatasetAPIMockGetInstance        sync.RWMutex
	lockDatasetAPIMockGetMetadataURL     sync.RWMutex
	lockDatasetAPIMockGetVersion         sync.RWMutex
	lockDatasetAPIMockGetVersionMetadata sync.RWMutex
	lockDatasetAPIMockPutVersion         sync.RWMutex
)

// DatasetAPIMock is a mock implementation of DatasetAPI.
//
//     func TestSomethingThatUsesDatasetAPI(t *testing.T) {
//
//         // make and configure a mocked DatasetAPI
//         mockedDatasetAPI := &DatasetAPIMock{
//             GetInstanceFunc: func(ctx context.Context, instanceID string) (dataset.Instance, error) {
// 	               panic("TODO: mock out the GetInstance method")
//             },
//             GetMetadataURLFunc: func(ctx context.Context, id string, edition string, version string) string {
// 	               panic("TODO: mock out the GetMetadataURL method")
//             },
//             GetVersionFunc: func(ctx context.Context, id string, edition string, version string) (dataset.Version, error) {
// 	               panic("TODO: mock out the GetVersion method")
//             },
//             GetVersionMetadataFunc: func(ctx context.Context, id string, edition string, version string) (dataset.Metadata, error) {
// 	               panic("TODO: mock out the GetVersionMetadata method")
//             },
//             PutVersionFunc: func(ctx context.Context, id string, edition string, version string, m dataset.Version) error {
// 	               panic("TODO: mock out the PutVersion method")
//             },
//         }
//
//         // TODO: use mockedDatasetAPI in code that requires DatasetAPI
//         //       and then make assertions.
//
//     }
type DatasetAPIMock struct {
	// GetInstanceFunc mocks the GetInstance method.
	GetInstanceFunc func(ctx context.Context, instanceID string) (dataset.Instance, error)

	// GetMetadataURLFunc mocks the GetMetadataURL method.
	GetMetadataURLFunc func(ctx context.Context, id string, edition string, version string) string

	// GetVersionFunc mocks the GetVersion method.
	GetVersionFunc func(ctx context.Context, id string, edition string, version string) (dataset.Version, error)

	// GetVersionMetadataFunc mocks the GetVersionMetadata method.
	GetVersionMetadataFunc func(ctx context.Context, id string, edition string, version string) (dataset.Metadata, error)

	// PutVersionFunc mocks the PutVersion method.
	PutVersionFunc func(ctx context.Context, id string, edition string, version string, m dataset.Version) error

	// calls tracks calls to the methods.
	calls struct {
		// GetInstance holds details about calls to the GetInstance method.
		GetInstance []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstanceID is the instanceID argument value.
			InstanceID string
		}
		// GetMetadataURL holds details about calls to the GetMetadataURL method.
		GetMetadataURL []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Edition is the edition argument value.
			Edition string
			// Version is the version argument value.
			Version string
		}
		// GetVersion holds details about calls to the GetVersion method.
		GetVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Edition is the edition argument value.
			Edition string
			// Version is the version argument value.
			Version string
		}
		// GetVersionMetadata holds details about calls to the GetVersionMetadata method.
		GetVersionMetadata []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Edition is the edition argument value.
			Edition string
			// Version is the version argument value.
			Version string
		}
		// PutVersion holds details about calls to the PutVersion method.
		PutVersion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
			// Edition is the edition argument value.
			Edition string
			// Version is the version argument value.
			Version string
			// M is the m argument value.
			M dataset.Version
		}
	}
}

// GetInstance calls GetInstanceFunc.
func (mock *DatasetAPIMock) GetInstance(ctx context.Context, instanceID string) (dataset.Instance, error) {
	if mock.GetInstanceFunc == nil {
		panic("DatasetAPIMock.GetInstanceFunc: method is nil but DatasetAPI.GetInstance was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		InstanceID string
	}{
		Ctx:        ctx,
		InstanceID: instanceID,
	}
	lockDatasetAPIMockGetInstance.Lock()
	mock.calls.GetInstance = append(mock.calls.GetInstance, callInfo)
	lockDatasetAPIMockGetInstance.Unlock()
	return mock.GetInstanceFunc(ctx, instanceID)
}

// GetInstanceCalls gets all the calls that were made to GetInstance.
// Check the length with:
//     len(mockedDatasetAPI.GetInstanceCalls())
func (mock *DatasetAPIMock) GetInstanceCalls() []struct {
	Ctx        context.Context
	InstanceID string
} {
	var calls []struct {
		Ctx        context.Context
		InstanceID string
	}
	lockDatasetAPIMockGetInstance.RLock()
	calls = mock.calls.GetInstance
	lockDatasetAPIMockGetInstance.RUnlock()
	return calls
}

// GetMetadataURL calls GetMetadataURLFunc.
func (mock *DatasetAPIMock) GetMetadataURL(ctx context.Context, id string, edition string, version string) string {
	if mock.GetMetadataURLFunc == nil {
		panic("DatasetAPIMock.GetMetadataURLFunc: method is nil but DatasetAPI.GetMetadataURL was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ID      string
		Edition string
		Version string
	}{
		Ctx:     ctx,
		ID:      id,
		Edition: edition,
		Version: version,
	}
	lockDatasetAPIMockGetMetadataURL.Lock()
	mock.calls.GetMetadataURL = append(mock.calls.GetMetadataURL, callInfo)
	lockDatasetAPIMockGetMetadataURL.Unlock()
	return mock.GetMetadataURLFunc(ctx, id, edition, version)
}

// GetMetadataURLCalls gets all the calls that were made to GetMetadataURL.
// Check the length with:
//     len(mockedDatasetAPI.GetMetadataURLCalls())
func (mock *DatasetAPIMock) GetMetadataURLCalls() []struct {
	Ctx     context.Context
	ID      string
	Edition string
	Version string
} {
	var calls []struct {
		Ctx     context.Context
		ID      string
		Edition string
		Version string
	}
	lockDatasetAPIMockGetMetadataURL.RLock()
	calls = mock.calls.GetMetadataURL
	lockDatasetAPIMockGetMetadataURL.RUnlock()
	return calls
}

// GetVersion calls GetVersionFunc.
func (mock *DatasetAPIMock) GetVersion(ctx context.Context, id string, edition string, version string) (dataset.Version, error) {
	if mock.GetVersionFunc == nil {
		panic("DatasetAPIMock.GetVersionFunc: method is nil but DatasetAPI.GetVersion was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ID      string
		Edition string
		Version string
	}{
		Ctx:     ctx,
		ID:      id,
		Edition: edition,
		Version: version,
	}
	lockDatasetAPIMockGetVersion.Lock()
	mock.calls.GetVersion = append(mock.calls.GetVersion, callInfo)
	lockDatasetAPIMockGetVersion.Unlock()
	return mock.GetVersionFunc(ctx, id, edition, version)
}

// GetVersionCalls gets all the calls that were made to GetVersion.
// Check the length with:
//     len(mockedDatasetAPI.GetVersionCalls())
func (mock *DatasetAPIMock) GetVersionCalls() []struct {
	Ctx     context.Context
	ID      string
	Edition string
	Version string
} {
	var calls []struct {
		Ctx     context.Context
		ID      string
		Edition string
		Version string
	}
	lockDatasetAPIMockGetVersion.RLock()
	calls = mock.calls.GetVersion
	lockDatasetAPIMockGetVersion.RUnlock()
	return calls
}

// GetVersionMetadata calls GetVersionMetadataFunc.
func (mock *DatasetAPIMock) GetVersionMetadata(ctx context.Context, id string, edition string, version string) (dataset.Metadata, error) {
	if mock.GetVersionMetadataFunc == nil {
		panic("DatasetAPIMock.GetVersionMetadataFunc: method is nil but DatasetAPI.GetVersionMetadata was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ID      string
		Edition string
		Version string
	}{
		Ctx:     ctx,
		ID:      id,
		Edition: edition,
		Version: version,
	}
	lockDatasetAPIMockGetVersionMetadata.Lock()
	mock.calls.GetVersionMetadata = append(mock.calls.GetVersionMetadata, callInfo)
	lockDatasetAPIMockGetVersionMetadata.Unlock()
	return mock.GetVersionMetadataFunc(ctx, id, edition, version)
}

// GetVersionMetadataCalls gets all the calls that were made to GetVersionMetadata.
// Check the length with:
//     len(mockedDatasetAPI.GetVersionMetadataCalls())
func (mock *DatasetAPIMock) GetVersionMetadataCalls() []struct {
	Ctx     context.Context
	ID      string
	Edition string
	Version string
} {
	var calls []struct {
		Ctx     context.Context
		ID      string
		Edition string
		Version string
	}
	lockDatasetAPIMockGetVersionMetadata.RLock()
	calls = mock.calls.GetVersionMetadata
	lockDatasetAPIMockGetVersionMetadata.RUnlock()
	return calls
}

// PutVersion calls PutVersionFunc.
func (mock *DatasetAPIMock) PutVersion(ctx context.Context, id string, edition string, version string, m dataset.Version) error {
	if mock.PutVersionFunc == nil {
		panic("DatasetAPIMock.PutVersionFunc: method is nil but DatasetAPI.PutVersion was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		ID      string
		Edition string
		Version string
		M       dataset.Version
	}{
		Ctx:     ctx,
		ID:      id,
		Edition: edition,
		Version: version,
		M:       m,
	}
	lockDatasetAPIMockPutVersion.Lock()
	mock.calls.PutVersion = append(mock.calls.PutVersion, callInfo)
	lockDatasetAPIMockPutVersion.Unlock()
	return mock.PutVersionFunc(ctx, id, edition, version, m)
}

// PutVersionCalls gets all the calls that were made to PutVersion.
// Check the length with:
//     len(mockedDatasetAPI.PutVersionCalls())
func (mock *DatasetAPIMock) PutVersionCalls() []struct {
	Ctx     context.Context
	ID      string
	Edition string
	Version string
	M       dataset.Version
} {
	var calls []struct {
		Ctx     context.Context
		ID      string
		Edition string
		Version string
		M       dataset.Version
	}
	lockDatasetAPIMockPutVersion.RLock()
	calls = mock.calls.PutVersion
	lockDatasetAPIMockPutVersion.RUnlock()
	return calls
}
