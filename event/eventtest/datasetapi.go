// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package eventtest

import (
	"github.com/ONSdigital/go-ns/clients/dataset"
	"sync"
)

var (
	lockDatasetAPIMockPutVersion sync.RWMutex
)

// DatasetAPIMock is a mock implementation of DatasetAPI.
//
//     func TestSomethingThatUsesDatasetAPI(t *testing.T) {
//
//         // make and configure a mocked DatasetAPI
//         mockedDatasetAPI := &DatasetAPIMock{
//             PutVersionFunc: func(id string, edition string, version string, m dataset.Version) error {
// 	               panic("TODO: mock out the PutVersion method")
//             },
//         }
//
//         // TODO: use mockedDatasetAPI in code that requires DatasetAPI
//         //       and then make assertions.
//
//     }
type DatasetAPIMock struct {
	// PutVersionFunc mocks the PutVersion method.
	PutVersionFunc func(id string, edition string, version string, m dataset.Version) error

	// calls tracks calls to the methods.
	calls struct {
		// PutVersion holds details about calls to the PutVersion method.
		PutVersion []struct {
			// Id is the id argument value.
			Id string
			// Edition is the edition argument value.
			Edition string
			// Version is the version argument value.
			Version string
			// M is the m argument value.
			M dataset.Version
		}
	}
}

// PutVersion calls PutVersionFunc.
func (mock *DatasetAPIMock) PutVersion(id string, edition string, version string, m dataset.Version) error {
	if mock.PutVersionFunc == nil {
		panic("moq: DatasetAPIMock.PutVersionFunc is nil but DatasetAPI.PutVersion was just called")
	}
	callInfo := struct {
		Id      string
		Edition string
		Version string
		M       dataset.Version
	}{
		Id:      id,
		Edition: edition,
		Version: version,
		M:       m,
	}
	lockDatasetAPIMockPutVersion.Lock()
	mock.calls.PutVersion = append(mock.calls.PutVersion, callInfo)
	lockDatasetAPIMockPutVersion.Unlock()
	return mock.PutVersionFunc(id, edition, version, m)
}

// PutVersionCalls gets all the calls that were made to PutVersion.
// Check the length with:
//     len(mockedDatasetAPI.PutVersionCalls())
func (mock *DatasetAPIMock) PutVersionCalls() []struct {
	Id      string
	Edition string
	Version string
	M       dataset.Version
} {
	var calls []struct {
		Id      string
		Edition string
		Version string
		M       dataset.Version
	}
	lockDatasetAPIMockPutVersion.RLock()
	calls = mock.calls.PutVersion
	lockDatasetAPIMockPutVersion.RUnlock()
	return calls
}
