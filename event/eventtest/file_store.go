// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package eventtest

import (
	"context"
	"github.com/ONSdigital/dp-dataset-exporter/event"
	"io"
	"sync"
)

// Ensure, that FileStoreMock does implement event.FileStore.
// If this is not the case, regenerate this file with moq.
var _ event.FileStore = &FileStoreMock{}

// FileStoreMock is a mock implementation of event.FileStore.
//
// 	func TestSomethingThatUsesFileStore(t *testing.T) {
//
// 		// make and configure a mocked event.FileStore
// 		mockedFileStore := &FileStoreMock{
// 			PutFileFunc: func(ctx context.Context, reader io.Reader, filename string, isPublished bool) (string, error) {
// 				panic("mock out the PutFile method")
// 			},
// 		}
//
// 		// use mockedFileStore in code that requires event.FileStore
// 		// and then make assertions.
//
// 	}
type FileStoreMock struct {
	// PutFileFunc mocks the PutFile method.
	PutFileFunc func(ctx context.Context, reader io.Reader, filename string, isPublished bool) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// PutFile holds details about calls to the PutFile method.
		PutFile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Reader is the reader argument value.
			Reader io.Reader
			// Filename is the filename argument value.
			Filename string
			// IsPublished is the isPublished argument value.
			IsPublished bool
		}
	}
	lockPutFile sync.RWMutex
}

// PutFile calls PutFileFunc.
func (mock *FileStoreMock) PutFile(ctx context.Context, reader io.Reader, filename string, isPublished bool) (string, error) {
	if mock.PutFileFunc == nil {
		panic("FileStoreMock.PutFileFunc: method is nil but FileStore.PutFile was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Reader      io.Reader
		Filename    string
		IsPublished bool
	}{
		Ctx:         ctx,
		Reader:      reader,
		Filename:    filename,
		IsPublished: isPublished,
	}
	mock.lockPutFile.Lock()
	mock.calls.PutFile = append(mock.calls.PutFile, callInfo)
	mock.lockPutFile.Unlock()
	return mock.PutFileFunc(ctx, reader, filename, isPublished)
}

// PutFileCalls gets all the calls that were made to PutFile.
// Check the length with:
//     len(mockedFileStore.PutFileCalls())
func (mock *FileStoreMock) PutFileCalls() []struct {
	Ctx         context.Context
	Reader      io.Reader
	Filename    string
	IsPublished bool
} {
	var calls []struct {
		Ctx         context.Context
		Reader      io.Reader
		Filename    string
		IsPublished bool
	}
	mock.lockPutFile.RLock()
	calls = mock.calls.PutFile
	mock.lockPutFile.RUnlock()
	return calls
}
